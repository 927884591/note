(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{453:function(a,t,r){"use strict";r.r(t);var v=r(62),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"什么是数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据结构"}},[a._v("#")]),a._v(" 什么是数据结构？")]),a._v(" "),r("p",[a._v("数据结构就是按某种方式去存储，类似于图书馆中图书如何去摆放一样。")]),a._v(" "),r("h2",{attrs:{id:"什么是算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是算法"}},[a._v("#")]),a._v(" 什么是算法")]),a._v(" "),r("p",[a._v("算法就是处理怎么存储才能更高效。")]),a._v(" "),r("blockquote",[r("p",[a._v("数据结构和算法都是为了解决计算机如何更高效的去处理某些数据，更快的查找数据")])]),a._v(" "),r("h2",{attrs:{id:"数组结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组结构"}},[a._v("#")]),a._v(" 数组结构")]),a._v(" "),r("p",[a._v("数组结构中的插入和删除操作都是比较耗时的操作。")]),a._v(" "),r("blockquote",[r("p",[a._v("数组结构是一种线性结构")])]),a._v(" "),r("h3",{attrs:{id:"插入操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#插入操作"}},[a._v("#")]),a._v(" 插入操作")]),a._v(" "),r("p",[a._v("如果直接在数组最后插入是最不耗性能的。但如果是在数组前面使用插入操作，则需要往后移动数组才能插入操作。")]),a._v(" "),r("p",[a._v("![image-20220419113232648](/Users/happy/Library/Application Support/typora-user-images/image-20220419113232648.png)")]),a._v(" "),r("h3",{attrs:{id:"删除操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[a._v("#")]),a._v(" 删除操作")]),a._v(" "),r("p",[a._v("如果是在数组末尾删除也是最不耗性能，但在前面删除，则删除完后需要后面的数组往前移动。")]),a._v(" "),r("p",[a._v("![image-20220419113507289](/Users/happy/Library/Application Support/typora-user-images/image-20220419113507289.png)")]),a._v(" "),r("h2",{attrs:{id:"栈结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈结构"}},[a._v("#")]),a._v(" 栈结构")]),a._v(" "),r("p",[a._v("栈结构的特点，不同于数组结构，数组结构可以任意删除或者任意插入，栈结构只能在末端删除和插入操作。最大的特点就是先进后出。")]),a._v(" "),r("p",[a._v("栈的操作名词")]),a._v(" "),r("p",[a._v("插入元素，他们表示的都是一个意思")]),a._v(" "),r("ol",[r("li",[a._v("进栈")]),a._v(" "),r("li",[a._v("入栈")]),a._v(" "),r("li",[a._v("压栈")])]),a._v(" "),r("p",[a._v("删除元素的名词，表示的都是一个意思")]),a._v(" "),r("ol",[r("li",[a._v("出栈")]),a._v(" "),r("li",[a._v("退栈")])]),a._v(" "),r("p",[a._v("![image-20220419114118732](/Users/happy/Library/Application Support/typora-user-images/image-20220419114118732.png)")]),a._v(" "),r("blockquote",[r("p",[a._v("栈结构是一种特殊的线性结构")])]),a._v(" "),r("h3",{attrs:{id:"函数调用栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数调用栈"}},[a._v("#")]),a._v(" 函数调用栈")]),a._v(" "),r("p",[a._v("函数A调用了函数B函数B调用了函数C，这个我们称为函数调用栈")]),a._v(" "),r("p",[a._v("首先A会压栈，B压栈，C压栈。C执行完后C先出栈，B出栈，A出栈")]),a._v(" "),r("p",[a._v("![image-20220419115845597](/Users/happy/Library/Application Support/typora-user-images/image-20220419115845597.png)")]),a._v(" "),r("h4",{attrs:{id:"栈溢出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈溢出"}},[a._v("#")]),a._v(" 栈溢出")]),a._v(" "),r("p",[a._v("栈溢出一般是栈递归导致的。因为函数自己调用自己，栈结构就会一直压栈一直压栈。最后导致栈溢出")]),a._v(" "),r("h3",{attrs:{id:"栈结构的应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈结构的应用"}},[a._v("#")]),a._v(" 栈结构的应用")]),a._v(" "),r("p",[a._v("利用栈的结构我们可以进制转换")]),a._v(" "),r("p",[a._v("![image-20220419134637287](/Users/happy/Library/Application Support/typora-user-images/image-20220419134637287.png)")]),a._v(" "),r("p",[a._v("主要思路，先求结果把余数存放到栈中，然后输出")]),a._v(" "),r("h2",{attrs:{id:"队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[a._v("#")]),a._v(" 队列")]),a._v(" "),r("p",[a._v("队列的特点就是先进先出。")]),a._v(" "),r("p",[a._v("生活中的例子打印机")]),a._v(" "),r("p",[a._v("打印机就是一个队列的结构，先打印的先出来。")])])}),[],!1,null,null,null);t.default=_.exports}}]);